#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "home_row_mod_left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 22 36 37 23 8 9 24 38 39 25 10 11 26 40 41 27 12 47 46 45>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "home_row_mod_right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44>;
            hold-trigger-on-release;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESC   &kp Q                &kp W            &kp E            &kp R              &kp T                              &kp ENTER           &kp Y            &kp U               &kp I             &kp O             &kp P            &kp LEFT_BRACKET
&kp TAB   &hml LEFT_CONTROL A  &hml LEFT_WIN S  &hml LEFT_ALT D  &hml LEFT_SHIFT F  &kp G                    &kp HOME  &kp ENTER  &kp END  &kp H            &hmr RIGHT_SHIFT J  &hmr RIGHT_ALT K  &hmr RIGHT_WIN L  &hmr RCTRL SEMI  &kp SQT
&kp NUBS  &kp Z                &kp X            &kp C            &kp V              &kp B      &kp C_MUTE              &kp DOWN            &kp N            &kp M               &kp COMMA         &kp DOT           &kp FSLH         &kp DEL
                                                &kp LEFT_ALT     &mo 1              &kp SPACE                                              &lt 3 BACKSPACE  &mo 2               &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&trans           &kp KP_NUMBER_1  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp N5                                         &kp K_PLAY_PAUSE              &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp N9           &kp GRAVE  &kp BSPC
&trans           &kp KP_NUM       &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp LEFT_SHIFT                     &kp K_PREV  &mkp LCLK         &kp K_NEXT  &kp NUMBER_4  &kp N5        &kp N6        &kp N0           &kp PG_UP  &kp PG_DN
&rgb_ug RGB_OFF  &rgb_ug RGB_ON   &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp LEFT_ALT    &rgb_ug RGB_TOG                &mmv MOVE_DOWN                &kp N7        &kp N8        &kp N9        &rgb_ug RGB_BRD  &kp HOME   &kp END
                                                   &kp KP_NUMBER_0  &trans           &trans                                                                       &kp INS       &kp DEL       &trans
            >;

            sensor-bindings = <&rgb_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT                            &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&trans  &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &mkp MB4             &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans  &out OUT_USB  &out OUT_BLE  &none         &none         &mkp MB5   &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                    &trans        &trans        &kp SPACE                                                             &kp RET    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1  &kp F2     &kp F3     &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6  &kp F7     &kp F8     &kp F9     &kp F10          &kp F11
&trans          &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &kp PRINTSCREEN  &kp F12
&trans          &trans  &trans     &trans     &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans  &trans     &trans     &trans     &kp SCROLLLOCK   &kp PAUSE_BREAK
                                   &trans     &trans     &trans                                                                   &trans  &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
